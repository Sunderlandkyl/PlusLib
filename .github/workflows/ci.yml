name: Continuous integration

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Specify VTK version
  VTK_HASH: 6b6b89ee577e6c6a5ee6f5220b9c6a12513c30b4 # v9.4.1
  # Specify ITK version
  ITK_HASH: 898def645183e6a2d3293058ade451ec416c4514 # v5.4.2
  # PlusBuild build options
  PLUS_COMMON_CONFIG: -DPLUS_USE_3dConnexion_TRACKER:BOOL=ON -DPLUS_USE_Ascension3DGm:BOOL=OFF -DPLUS_USE_BKPROFOCUS_VIDEO:BOOL=ON -DPLUS_USE_EPIPHAN:BOOL=ON -DPLUS_USE_ICCAPTURING_VIDEO:BOOL=ON -DPLUS_USE_PHIDGET_SPATIAL_TRACKER:BOOL=ON -DPLUS_USE_NDI:BOOL=ON -DPLUS_USE_VFW_VIDEO:BOOL=ON -DPLUS_USE_OPTITRACK:BOOL=ON -DPLUS_USE_INTELREALSENSE:BOOL=ON -DPLUSBUILD_PREFER_MicronTracker_36:BOOL=OFF -DPLUS_USE_TextRecognizer:BOOL=ON -DPLUS_USE_WITMOTIONTRACKER:BOOL=ON -DPLUS_USE_MKV_IO:BOOL=ON -DPLUS_ENABLE_VIDEOSTREAMING:BOOL=ON -DPLUS_USE_VP9:BOOL=ON -DPLUSBUILD_BUILDNAME_POSTFIX=gh-package
  PLUS_x64_COMMON_CONFIG: -DPLUS_USE_Ascension3DG:BOOL=OFF -DPLUS_USE_BRACHY_TRACKER:BOOL=OFF -DPLUS_USE_NDI_CERTUS:BOOL=OFF -DPLUS_USE_ULTRASONIX_VIDEO:BOOL=OFF

jobs:
  ########
  # BUILD AND CACHE VTK
  update_vtk:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]

    steps:        
    - name: Cache VTK Build
      id: cache-vtk
      uses: actions/cache@v4
      with:
        path: vtk-install
        lookup-only: true
        key: vtk-${{ runner.os }}-${{ matrix.build_type }}-${{ env.VTK_HASH }}

    - name: Install Dependencies
      if: contains(matrix.os, 'ubuntu') && steps.cache-vtk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        sudo apt update && sudo apt install -y cmake g++ libgl1-mesa-dev libxt-dev libxrender-dev libxext-dev libglu1-mesa-dev make

    - name: Install Qt
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      uses: jurplel/install-qt-action@v4
      with:
        dir: ${{github.workspace}}/Qt
        version: '5.15.0'

    - name: Clone VTK
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir vtk
        cd vtk
        git init
        git remote add origin https://gitlab.kitware.com/vtk/vtk.git
        git fetch --depth 1 origin $VTK_HASH
        git checkout FETCH_HEAD

    - name: Configure VTK
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cmake -S vtk -B vtk-build -DCMAKE_INSTALL_PREFIX=vtk-install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_SHARED_LIBS=ON -DVTK_BUILD_TESTING=OFF -DVTK_VERSIONED_INSTALL=OFF -DVTK_GROUP_ENABLE_Qt:STRING=YES -DQt5_Dir='${{github.workspace}}/Qt/Qt/5.15.0/msvc2019_64/lib/cmake'

    - name: Build VTK
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cmake --build vtk-build --parallel 4 --config ${{ matrix.build_type }}

    - name: Install VTK
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cmake --install vtk-build

  update_itk:
    ########
    # BUILD AND CACHE ITK
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]

    steps:
    - name: Cache ITK Build
      id: cache-itk
      uses: actions/cache@v4
      with:
        lookup-only: true
        path: itk-install
        key: itk-${{ runner.os }}-${{ matrix.build_type }}-${{ env.ITK_HASH }}
        
    - name: Install Dependencies
      if: contains(matrix.os, 'ubuntu') && steps.cache-itk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        sudo apt update && sudo apt install -y cmake g++ libgl1-mesa-dev libxt-dev libxrender-dev libxext-dev libglu1-mesa-dev make

    - name: Clone ITK
      if: steps.cache-itk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Cloning ITK..."
        mkdir itk
        cd itk
        git init
        git remote add origin https://github.com/InsightSoftwareConsortium/ITK.git
        git fetch --depth 1 origin $ITK_HASH
        git checkout FETCH_HEAD

    - name: Configure ITK
      if: steps.cache-itk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cmake -S itk -B itk-build -DCMAKE_INSTALL_PREFIX=itk-install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF

    - name: Build ITK
      if: steps.cache-itk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cmake --build itk-build --parallel 4 --config ${{ matrix.build_type }}

    - name: Install ITK
      if: steps.cache-itk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cmake --install itk-build

  build:
    ########
    # BUILD AND TEST PlusBuild
    needs: [update_vtk, update_itk]
    uses: ./.github/workflows/build-plus.yml
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]
    with:
      vtk-cache-key: vtk-Windows-Release-6b6b89ee577e6c6a5ee6f5220b9c6a12513c30b4 # todo: fix
      itk-cache-key: itk-Windows-Release-898def645183e6a2d3293058ade451ec416c4514
      plus-cache-key: plus-${{ matrix.os }}-${{ matrix.build_type }}
      plus-config: >-
        -DPLUS_USE_3dConnexion_TRACKER:BOOL=ON
        -DPLUS_USE_Ascension3DGm:BOOL=OFF
        -DPLUS_USE_BKPROFOCUS_VIDEO:BOOL=ON
        -DPLUS_USE_EPIPHAN:BOOL=ON
        -DPLUS_USE_ICCAPTURING_VIDEO:BOOL=ON
        -DPLUS_USE_PHIDGET_SPATIAL_TRACKER:BOOL=ON
        -DPLUS_USE_NDI:BOOL=ON
        -DPLUS_USE_VFW_VIDEO:BOOL=ON
        -DPLUS_USE_OPTITRACK:BOOL=ON
        -DPLUS_USE_INTELREALSENSE:BOOL=OFF
        -DPLUSBUILD_PREFER_MicronTracker_36:BOOL=OFF
        -DPLUS_USE_TextRecognizer:BOOL=ON
        -DPLUS_USE_WITMOTIONTRACKER:BOOL=ON
        -DPLUS_USE_MKV_IO:BOOL=ON
        -DPLUS_ENABLE_VIDEOSTREAMING:BOOL=ON
        -DPLUS_USE_VP9:BOOL=ON
        -DPLUSBUILD_BUILDNAME_POSTFIX=gh-package
        -DPLUS_USE_Ascension3DG:BOOL=OFF
        -DPLUS_USE_BRACHY_TRACKER:BOOL=OFF
        -DPLUS_USE_NDI_CERTUS:BOOL=OFF
        -DPLUS_USE_ULTRASONIX_VIDEO:BOOL=OFF
      use-plus-cache: true
