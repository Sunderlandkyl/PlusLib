name: Continuous integration

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # VTK and ITK versions
  VTK_HASH: 6b6b89ee577e6c6a5ee6f5220b9c6a12513c30b4 # v9.4.1
  ITK_HASH: 898def645183e6a2d3293058ade451ec416c4514 # v5.4.2

  # Example extra build options
  BUILD_OPTIONS: -DIGSIO_BUILD_VOLUMERECONSTRUCTION=ON

jobs:
  ##############################################################################
  # 1) BUILD AND CACHE VTK
  update_vtk:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4

    # --- Short Path Setup (Windows => C:\b, Linux/macOS => /b) ---
    - name: Move repo to short path
      id: short-path
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          echo "Creating C:\\b and copying workspace..."
          mkdir C:\b
          # Use PowerShell or robocopy:
          powershell -Command "robocopy $env:GITHUB_WORKSPACE C:\\b /E"
          echo "BUILD_PREFIX=C:\\b" >> $GITHUB_ENV
        else
          echo "Creating /b and copying workspace..."
          sudo mkdir /b
          sudo chmod 777 /b
          cp -r $GITHUB_WORKSPACE/. /b
          echo "BUILD_PREFIX=/b" >> $GITHUB_ENV
        fi

    - name: Cache VTK Build
      id: cache-vtk
      uses: actions/cache@v4
      with:
        # We store VTK install tree under $BUILD_PREFIX/vtk-install
        path: ${{ env.BUILD_PREFIX }}/vtk-install
        key: vtk-${{ runner.os }}-${{ matrix.build_type }}-${{ env.VTK_HASH }}
        # option: restore-keys: ...

    - name: Install Dependencies (Linux)
      if: ${{ runner.os == 'Linux' && steps.cache-vtk.outputs.cache-hit != 'true' }}
      run: |
        sudo apt update
        sudo apt install -y cmake g++ libgl1-mesa-dev libxt-dev libxrender-dev libxext-dev libglu1-mesa-dev make

    - name: Install Qt (only if not cached)
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      uses: jurplel/install-qt-action@v4
      with:
        dir: ${{ env.BUILD_PREFIX }}/Qt

    - name: Clone VTK
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      run: |
        mkdir -p ${{ env.BUILD_PREFIX }}/vtk
        cd ${{ env.BUILD_PREFIX }}/vtk
        git init
        git remote add origin https://gitlab.kitware.com/vtk/vtk.git
        git fetch --depth 1 origin ${{ env.VTK_HASH }}
        git checkout FETCH_HEAD

    - name: Configure VTK
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      run: |
        cmake -S ${{ env.BUILD_PREFIX }}/vtk \
              -B ${{ env.BUILD_PREFIX }}/vtk-build \
              -DCMAKE_INSTALL_PREFIX=${{ env.BUILD_PREFIX }}/vtk-install \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DBUILD_SHARED_LIBS=ON \
              -DVTK_BUILD_TESTING=OFF \
              -DVTK_VERSIONED_INSTALL=OFF \
              -DVTK_GROUP_ENABLE_Qt=YES \
              -DQt5_Dir='${{ env.BUILD_PREFIX }}/Qt/Qt/5.15.0/msvc2019_64/lib/cmake'

    - name: Build VTK
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      run: |
        cmake --build ${{ env.BUILD_PREFIX }}/vtk-build --config ${{ matrix.build_type }} --parallel 4

    - name: Install VTK
      if: steps.cache-vtk.outputs.cache-hit != 'true'
      run: |
        cmake --install ${{ env.BUILD_PREFIX }}/vtk-build

  ##############################################################################
  # 2) BUILD AND CACHE ITK
  update_itk:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4

    # --- Short Path Setup again ---
    - name: Move repo to short path
      id: short-path
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          echo "Creating C:\\b and copying workspace..."
          mkdir C:\b
          powershell -Command "robocopy $env:GITHUB_WORKSPACE C:\\b /E"
          echo "BUILD_PREFIX=C:\\b" >> $GITHUB_ENV
        else
          echo "Creating /b and copying workspace..."
          sudo mkdir /b
          sudo chmod 777 /b
          cp -r $GITHUB_WORKSPACE/. /b
          echo "BUILD_PREFIX=/b" >> $GITHUB_ENV
        fi

    - name: Cache ITK Build
      id: cache-itk
      uses: actions/cache@v4
      with:
        path: ${{ env.BUILD_PREFIX }}/itk-install
        key: itk-${{ runner.os }}-${{ matrix.build_type }}-${{ env.ITK_HASH }}

    - name: Install Dependencies (Linux)
      if: ${{ runner.os == 'Linux' && steps.cache-itk.outputs.cache-hit != 'true' }}
      run: |
        sudo apt update
        sudo apt install -y cmake g++ libgl1-mesa-dev libxt-dev libxrender-dev libxext-dev libglu1-mesa-dev make

    - name: Clone ITK
      if: steps.cache-itk.outputs.cache-hit != 'true'
      run: |
        echo "Cloning ITK..."
        mkdir -p ${{ env.BUILD_PREFIX }}/itk
        cd ${{ env.BUILD_PREFIX }}/itk
        git init
        git remote add origin https://github.com/InsightSoftwareConsortium/ITK.git
        git fetch --depth 1 origin $ITK_HASH
        git checkout FETCH_HEAD

    - name: Configure ITK
      if: steps.cache-itk.outputs.cache-hit != 'true'
      run: |
        cmake -S ${{ env.BUILD_PREFIX }}/itk \
              -B ${{ env.BUILD_PREFIX }}/itk-build \
              -DCMAKE_INSTALL_PREFIX=${{ env.BUILD_PREFIX }}/itk-install \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DBUILD_SHARED_LIBS=ON \
              -DBUILD_TESTING=OFF

    - name: Build ITK
      if: steps.cache-itk.outputs.cache-hit != 'true'
      run: |
        cmake --build ${{ env.BUILD_PREFIX }}/itk-build --parallel 4 --config ${{ matrix.build_type }}

    - name: Install ITK
      if: steps.cache-itk.outputs.cache-hit != 'true'
      run: |
        cmake --install ${{ env.BUILD_PREFIX }}/itk-build

  ##############################################################################
  # 3) BUILD, TEST, AND PACKAGE PlusBuild
  build:
    needs: [update_vtk, update_itk]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4

    # --- Short Path Setup yet again ---
    - name: Move repo to short path
      id: short-path
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          echo "Creating C:\\b and copying workspace..."
          mkdir C:\b
          powershell -Command "robocopy $env:GITHUB_WORKSPACE C:\\b /E"
          echo "BUILD_PREFIX=C:\\b" >> $GITHUB_ENV
        else
          echo "Creating /b and copying workspace..."
          sudo mkdir /b
          sudo chmod 777 /b
          cp -r $GITHUB_WORKSPACE/. /b
          echo "BUILD_PREFIX=/b" >> $GITHUB_ENV
        fi

    - name: Restore VTK Cache
      id: cache-vtk
      uses: actions/cache@v4
      with:
        path: ${{ env.BUILD_PREFIX }}/vtk-install
        key: vtk-${{ runner.os }}-${{ matrix.build_type }}-${{ env.VTK_HASH }}

    - name: Restore ITK Cache
      id: cache-itk
      uses: actions/cache@v4
      with:
        path: ${{ env.BUILD_PREFIX }}/itk-install
        key: itk-${{ runner.os }}-${{ matrix.build_type }}-${{ env.ITK_HASH }}

    - name: Install Dependencies (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt update
        sudo apt install -y cmake g++ libgl1-mesa-dev libxt-dev libxrender-dev libxext-dev libglu1-mesa-dev make

    - name: Install Qt
      if: ${{ runner.os == 'Windows' }}
      uses: jurplel/install-qt-action@v4
      with:
        dir: ${{ env.BUILD_PREFIX }}/Qt

    - name: Clone PlusBuild
      run: |
        git clone https://github.com/PlusToolkit/PlusBuild.git ${{ env.BUILD_PREFIX }}/PlusBuild

    - name: Configure CMake
      run: |
        cmake -S ${{ env.BUILD_PREFIX }}/PlusBuild \
              -B ${{ env.BUILD_PREFIX }}/build \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DVTK_DIR='${{ env.BUILD_PREFIX }}/vtk-install/lib/cmake/vtk' \
              -DITK_DIR='${{ env.BUILD_PREFIX }}/itk-install/lib/cmake/ITK-5.4' \
              -DQt5_Dir='${{ env.BUILD_PREFIX }}/Qt/Qt/5.15.0/msvc2019_64/lib/cmake' \
              ${{ env.BUILD_OPTIONS }}

    # Example "Experimental" build & test (CTest)
    - name: Experimental Build
      if: ${{ github.event_name != 'schedule' }}
      run: |
        ctest -C ${{ matrix.build_type }} \
              -D Experimental \
              -V \
              --test-dir ${{ env.BUILD_PREFIX }}/build

    # Example "Nightly" build
    - name: Nightly Build
      if: ${{ github.event_name == 'schedule' }}
      run: |
        ctest -C ${{ matrix.build_type }} \
              -D Nightly \
              -V \
              --test-dir ${{ env.BUILD_PREFIX }}/build
        # If you have a second run inside PlusLib-bin:
        cd ${{ env.BUILD_PREFIX }}/build/PlusLib-bin
        ctest -C ${{ matrix.build_type }} -D Nightly -V

    # On Windows, set up MSVC dev prompt if needed
    - uses: ilammy/msvc-dev-cmd@v1
      if: ${{ runner.os == 'Windows' }}

    - name: Package (on Windows)
      if: ${{ runner.os == 'Windows' }}
      run: |
        cd ${{ env.BUILD_PREFIX }}/build/PlusApp-bin
        # Your existing script that eventually calls cpack
        .\CreatePackage.bat

    - name: Upload artifact (installer .exe)
      uses: actions/upload-artifact@v4
      if: ${{ runner.os == 'Windows' }}
      with:
        name: PlusInstaller
        path: ${{ env.BUILD_PREFIX }}/build/PlusApp-bin/Plus.*exe
